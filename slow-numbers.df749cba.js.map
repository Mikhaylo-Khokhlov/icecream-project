{"version":3,"sources":["js/slow-numbers.js"],"names":["easing","quadratic","x","Math","sqrt","range","start","stop","step","array","i","push","interpolation","fps","finalValue","y","map","scaleIt","value","animateEl","values","duration","onAnimate","frameIndex","length","id","setInterval","anime","current","isLastFrame","clearInterval","round","decimals","Number","unformat","content","unlocalized","replace","parseFloat","format","toString","slice","call","document","querySelectorAll","forEach","el","firstChild","textContent","trim","decimalPlaces","split","isLast","isOnVisibleSpace","element","bodyHeight","window","innerHeight","offset","getBoundingClientRect","top","listenedElements","onVisibleSpaceListener","elementId","cbIn","cbOut","getElementById","inVisibleSpace","outVisibleSpace","addEventListener","item","result"],"mappings":";AAAA,IAAIA,EAAS,CACTC,UAAW,SAAUC,GACZC,OAAAA,KAAKC,KAAKF,KAIvB,SAASG,EAAMC,EAAOC,EAAMC,GACtBC,IAAAA,EAAQ,GACR,IAAA,IAAIC,EAAIJ,EAAOI,EAAIH,EAAMG,GAAKF,EAAMC,EAAME,KAAKD,GAC5CD,OAAAA,EAGT,SAASG,EAAcC,EAAKb,EAAQc,GAM3BC,OAHCV,EAAM,EAAG,EAAG,EAAEQ,GACZG,IAAIhB,GAAQgB,IAHbC,SAAQC,GAAcJ,OAAAA,EAAaI,IAQ9C,SAASC,EAAUC,EAAQC,EAAUC,GAC/BC,IAAAA,EAAa,EACbV,EAAMO,EAAOI,OACbC,EAAKC,YAEAC,WACHC,IAAAA,EAAUR,EAAOG,GACjBM,EAAeN,IAAeV,EAAM,EAExCS,EAAUM,EAASL,EAAYH,GAE5BS,EACDC,cAAcL,GAEdF,KAXwBF,EAASR,GAgBvC,SAASkB,EAAMb,EAAOc,GACbC,OAAAA,OAAO9B,KAAK4B,MAAMb,EAAM,IAAIc,GAAU,KAAKA,GAGpD,SAASE,EAASC,GACZC,IAAAA,EAAcD,EAAQE,QAAQ,IAAK,IAAIA,QAAQ,IAAK,KAEjDnB,OADKoB,WAAWF,GAIzB,SAASG,EAAOrB,GACPA,OAAAA,EAAMsB,WAAWH,QAAQ,IAAK,KAKvC,SAAS/B,IAEK,GAAGmC,MAAMC,KAAKC,SAASC,iBAAiB,iBAE9CC,QAAQ,SAASC,GACbX,IAAAA,EAAWW,EAAGC,WAAWC,YAAaC,OACtCC,EAAgBf,EAAQgB,MAAM,KAAK,IAAM,GACzCjC,EAAQgB,EAASC,GAGrBhB,EAFaP,EAPP,IAO0BZ,EAAOC,UAAWiB,GAEhC,IAAM,SAAUU,EAASlB,EAAGU,GACxCgC,IAAAA,EAAU1C,IAAMU,EAAOI,OAAS,EAChCN,EAAQa,EAAMH,EAASsB,EAAc1B,QACzCsB,EAAGC,WAAWC,YAAcI,EAAQjB,EAAUI,EAAOrB,OAU/D,SAASmC,EAAiBC,GACrBC,IAAAA,EAAaC,OAAOC,YAEnBC,EADWJ,EAAQK,wBACCC,IACrBF,QAAAA,EAAO,MACPA,EAAOH,GAKZ,IAAIM,EAAmB,GA4BvB,SAASC,EAAuBC,EAAWC,EAAMC,GAE3CnB,IAAAA,EAAKH,SAASuB,eAAeH,GAGjCF,EAAiBlD,KAAK,CACrBmC,GAAIA,EACHqB,eAAgBH,EAChBI,gBAAiBH,IAjCrBT,OAAOa,iBAAiB,SAAU,WAC9BR,EAAiBhB,QAAQyB,IAEjBC,IAAAA,EAASlB,EAAiBiB,EAAKxB,IAI/BwB,OAAAA,EAAKxB,GAAGO,mBAAqBkB,GAC7BD,EAAKxB,GAAGO,kBAAmB,OAC3BiB,EAAKF,gBAAgBE,EAAKxB,MAKzBwB,EAAKxB,GAAGO,kBAAoBkB,GAC7BD,EAAKxB,GAAGO,kBAAmB,OAC3BiB,EAAKH,eAAeG,EAAKxB,UAFzB,MAwBZgB,EAAuB,SACtBhB,IAGOxC,KAEPwC","file":"slow-numbers.df749cba.js","sourceRoot":"../src","sourcesContent":["let easing = {\n    quadratic: function (x){\n      return Math.sqrt(x);\n    }\n};\n\nfunction range(start, stop, step){\n  let array = [];\n  for(let i = start; i < stop; i += step) array.push(i);\n  return array;\n}\n\nfunction interpolation(fps, easing, finalValue){\n  function scaleIt(value){return finalValue * value; }\n\n  let x = range(0, 1, 1/fps),\n      y = x.map(easing).map(scaleIt);\n\n  return y;\n}\n\nfunction animateEl(values, duration, onAnimate){\n  let frameIndex = 0,\n      fps = values.length,\n      id = setInterval(anime, duration/fps );\n\n  function anime(){\n    let current = values[frameIndex],\n        isLastFrame = (frameIndex === fps - 1);\n\n    onAnimate(current, frameIndex, values);\n\n    if(isLastFrame){\n      clearInterval(id);\n    }else{\n      frameIndex++;\n    }\n  }\n}\n\nfunction round(value, decimals) {\n  return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n}\n\nfunction unformat(content){\n  let unlocalized = content.replace('.', '').replace(',', '.'),\n      value = parseFloat(unlocalized);\n  return value;\n}\n\nfunction format(value){\n  return value.toString().replace('.', ',');\n}\n\n// -------------------------------------------------------- next code ------\n\nfunction start(){\n    let fps = 120,\n        els = [].slice.call(document.querySelectorAll('.slow-number'));\n\n    els.forEach(function(el){\n        let content = (el.firstChild.textContent).trim(),\n            decimalPlaces = content.split(',')[1] || '',\n            value = unformat(content),\n            values = interpolation(fps, easing.quadratic, value);\n\n        animateEl(values, 1000, function (current, i, values){\n          let isLast = (i === values.length - 1),\n              value = round(current, decimalPlaces.length);\n          el.firstChild.textContent = isLast? content : format(value);\n        });\n    });\n}\n\n// ===============================  next code ================\n\n// функция определяет нахождение элемента в области видимости\n// если элемент видно - возвращает true\n// если элемент невидно - возвращает false\nfunction isOnVisibleSpace(element) {\n\tlet bodyHeight = window.innerHeight;\n  let elemRect = element.getBoundingClientRect();\n  let offset   = elemRect.top;// - bodyRect.top;\n  if(offset<0) return false;\n  if(offset>bodyHeight) return false;\n  return true;\n}\n\n// глобальный объект с элементами, для которых отслеживаем их положение в зоне видимости\nlet listenedElements = [];\n// обработчик события прокрутки экрана. Проверяет все элементы добавленные в listenedElements \n// на предмет попадания(выпадения) в зону видимости\nwindow.addEventListener('scroll', function () {\n    listenedElements.forEach(item => {\n        // проверяем находится ли элемент в зоне видимости\n        let result = isOnVisibleSpace(item.el);\n    \n        // если элемент находился в зоне видимости и вышел из нее\n        // вызываем обработчик выпадения из зоны видимости\n        if (item.el.isOnVisibleSpace && !result) {\n            item.el.isOnVisibleSpace = false;\n            item.outVisibleSpace(item.el);\n            return;\n        }\n        // если элемент находился вне зоны видимости и вошел в нее\n        // вызываем обработчик попадания в зону видимости\n        if (!item.el.isOnVisibleSpace && result) {\n            item.el.isOnVisibleSpace = true;\n            item.inVisibleSpace(item.el);\n            return;\n        }\n    });\n});\n\n// функция устанавливает обработчики событий \n// появления элемента в зоне видимости и\n// выхода из нее\nfunction onVisibleSpaceListener(elementId, cbIn, cbOut) {\n\t// получаем ссылку на объект элемента\n  let el = document.getElementById(elementId);\n  // добавляем элемент и обработчики событий \n  // в массив отслеживаемых элементов\n  listenedElements.push({\n  \tel: el,\n    inVisibleSpace: cbIn,\n    outVisibleSpace: cbOut    \n  });\n}\n\n// устанавливаем обработчики для элемента \"anchor\"\nonVisibleSpaceListener(\"anchor\", \n\tel=>{\n\t\t// функция вызываемая при попадании элемента в зону видимости\n    // тут вставляем код запуска анимации\n        start();\n\t},\n\tel=>{\n\t\t// функция вызываемая при выпадении элемента из зоны видимости\n    // тут вставляем код остановки анимации\n    // el.innerHTML = \"000000000000000000000000\";\n    // window.alert(\"элемент вне зоны видимости\");\n\t}\n);\n"]}